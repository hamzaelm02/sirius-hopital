package edu.ezip.ing1.pds.client;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayDeque;import java.util.Deque;import java.util.UUID;import edu.ezip.ing1.pds.business.dto.Student;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.slf4j.event.Level;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import de.vandermeer.asciitable.AsciiTable;import edu.ezip.commons.LoggingUtils;import edu.ezip.ing1.pds.business.dto.Profession;import edu.ezip.ing1.pds.business.dto.Professions;import edu.ezip.ing1.pds.client.commons.ClientRequest;import edu.ezip.ing1.pds.client.commons.ConfigLoader;import edu.ezip.ing1.pds.client.commons.NetworkConfig;import edu.ezip.ing1.pds.commons.Request;public class MainSelectAllProfession {    private final static String LoggingLabel = "I n s e r t e r - C l i e n t";    private final static Logger logger = LoggerFactory.getLogger(LoggingLabel);    private final static String studentsToBeInserted = "students-to-be-inserted.yaml";    private final static String networkConfigFile = "network.yaml";    private static final String threadName = "inserter-client";    private static final String requestOrder = "SELECT_PROFESSIONS_BY_DOMAINE";    private static final Deque<ClientRequest> clientRequests = new ArrayDeque<ClientRequest>();    public static Integer getIdProfession (Profession profession) throws Exception {        final NetworkConfig networkConfig = ConfigLoader.loadConfig(NetworkConfig.class, networkConfigFile);        logger.debug("Load Network config file : {}", networkConfig.toString());        int birthdate = 0;            final ObjectMapper objectMapper = new ObjectMapper();            final String jsonifiedGuy = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(profession);            logger.trace("Student with its JSON face : {}", jsonifiedGuy);            final String requestId = UUID.randomUUID().toString();            final Request request = new Request();            request.setRequestId(requestId);            request.setRequestOrder(requestOrder);            request.setRequestContent(jsonifiedGuy);            objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);            final byte []  requestBytes = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsBytes(request);            final SelectAllProfessionClientRequest clientRequest = new SelectAllProfessionClientRequest (                    networkConfig,                    birthdate++, request, profession, requestBytes);            System.out.println("0000000000000000000000000000000000000000000000000000000000");            clientRequests.push(clientRequest);        //while (!clientRequests.isEmpty()) {        final ClientRequest joinedClientRequest = clientRequests.pop();        joinedClientRequest.join();        logger.debug("Thread {} complete.", joinedClientRequest.getThreadName());         Integer idProfession = (Integer) joinedClientRequest.getResult();return  idProfession;    }}